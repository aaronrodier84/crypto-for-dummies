{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\n\nvar SymbolOverview = function (props) {\n  var widgetProps = props.widgetProps,\n      widgetPropsAny = props.widgetPropsAny;\n  var containerId = \"symbol-overview-widget-container\";\n\n  if (widgetProps === null || widgetProps === void 0 ? void 0 : widgetProps.container_id) {\n    containerId = widgetProps === null || widgetProps === void 0 ? void 0 : widgetProps.container_id;\n  }\n\n  var ref = React.createRef();\n  React.useEffect(function () {\n    var refValue;\n\n    if (ref.current) {\n      var script = document.createElement(\"script\");\n      script.src = \"https://s3.tradingview.com/tv.js\";\n      script.async = true;\n\n      script.onload = function () {\n        if (typeof TradingView !== \"undefined\") {\n          new TradingView.MediumWidget(__assign(__assign({\n            \"symbols\": [[\"Apple\", \"AAPL\"], [\"Google\", \"GOOGL\"], [\"Microsoft\", \"MSFT\"]],\n            \"chartOnly\": false,\n            \"width\": \"100%\",\n            \"height\": 400,\n            \"locale\": \"en\",\n            \"colorTheme\": \"dark\",\n            \"gridLineColor\": \"#2A2E39\",\n            \"trendLineColor\": \"#1976D2\",\n            \"fontColor\": \"#787B86\",\n            \"underLineColor\": \"rgba(55, 166, 239, 0.15)\",\n            \"isTransparent\": false,\n            \"autosize\": false,\n            \"container_id\": containerId\n          }, widgetProps), widgetPropsAny));\n        }\n      };\n\n      ref.current.appendChild(script);\n      refValue = ref.current;\n    }\n\n    return function () {\n      if (refValue) {\n        while (refValue.firstChild) {\n          refValue.removeChild(refValue.firstChild);\n        }\n      }\n    };\n  }, [ref, widgetProps, widgetPropsAny, containerId]);\n  return _jsx(\"div\", {\n    id: containerId,\n    ref: ref\n  }, void 0);\n};\n\nexport default SymbolOverview;","map":{"version":3,"sources":["../../src/components/SymbolOverview.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;;AA4BA,IAAM,cAAc,GAAG,UAAC,KAAD,EAA2B;AACxC,MAAA,WAAW,GAAqB,KAAK,CAA1B,WAAX;AAAA,MAAa,cAAc,GAAK,KAAK,CAAV,cAA3B;AAER,MAAI,WAAW,GAAG,kCAAlB;;AACA,MAAI,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,YAAjB,EAA+B;AAC7B,IAAA,WAAW,GAAG,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,YAA3B;AACD;;AAED,MAAM,GAAG,GAAqC,KAAK,CAAC,SAAN,EAA9C;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAA;AACd,QAAI,QAAJ;;AAEA,QAAI,GAAG,CAAC,OAAR,EAAiB;AACf,UAAM,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAf;AACA,MAAA,MAAM,CAAC,GAAP,GAAa,kCAAb;AACA,MAAA,MAAM,CAAC,KAAP,GAAe,IAAf;;AACA,MAAA,MAAM,CAAC,MAAP,GAAgB,YAAA;AACd,YAAI,OAAO,WAAP,KAAuB,WAA3B,EAAwC;AACtC,cAAI,WAAW,CAAC,YAAhB,CAA4B,QAAA,CAAA,QAAA,CAAA;AAExB,uBAAW,CACT,CACE,OADF,EAEE,MAFF,CADS,EAKT,CACE,QADF,EAEE,OAFF,CALS,EAST,CACE,WADF,EAEE,MAFF,CATS,CAFa;AAgBxB,yBAAa,KAhBW;AAiBxB,qBAAS,MAjBe;AAkBxB,sBAAU,GAlBc;AAmBxB,sBAAU,IAnBc;AAoBxB,0BAAc,MApBU;AAqBxB,6BAAiB,SArBO;AAsBxB,8BAAkB,SAtBM;AAuBxB,yBAAa,SAvBW;AAwBxB,8BAAkB,0BAxBM;AAyBxB,6BAAiB,KAzBO;AA0BxB,wBAAY,KA1BY;AA2BxB,4BAAgB;AA3BQ,WAAA,EA4BrB,WA5BqB,CAAA,EA6BrB,cA7BqB,CAA5B;AAgCD;AACF,OAnCD;;AAoCA,MAAA,GAAG,CAAC,OAAJ,CAAY,WAAZ,CAAwB,MAAxB;AACA,MAAA,QAAQ,GAAG,GAAG,CAAC,OAAf;AACD;;AAED,WAAO,YAAA;AACL,UAAI,QAAJ,EAAc;AACZ,eAAO,QAAQ,CAAC,UAAhB,EAA4B;AAC1B,UAAA,QAAQ,CAAC,WAAT,CAAqB,QAAQ,CAAC,UAA9B;AACD;AACF;AACF,KAND;AAOD,GAtDD,EAsDG,CAAC,GAAD,EAAM,WAAN,EAAmB,cAAnB,EAAmC,WAAnC,CAtDH;AAwDA,SAAO,IAAA,CAAA,KAAA,EAAA;AAAK,IAAA,EAAE,EAAE,WAAT;AAAsB,IAAA,GAAG,EAAE;AAA3B,GAAA,EAA8B,KAAA,CAA9B,CAAP;AACD,CAnED;;AAqEA,eAAe,cAAf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport React from \"react\";\r\nvar SymbolOverview = function (props) {\r\n    var widgetProps = props.widgetProps, widgetPropsAny = props.widgetPropsAny;\r\n    var containerId = \"symbol-overview-widget-container\";\r\n    if (widgetProps === null || widgetProps === void 0 ? void 0 : widgetProps.container_id) {\r\n        containerId = widgetProps === null || widgetProps === void 0 ? void 0 : widgetProps.container_id;\r\n    }\r\n    var ref = React.createRef();\r\n    React.useEffect(function () {\r\n        var refValue;\r\n        if (ref.current) {\r\n            var script = document.createElement(\"script\");\r\n            script.src = \"https://s3.tradingview.com/tv.js\";\r\n            script.async = true;\r\n            script.onload = function () {\r\n                if (typeof TradingView !== \"undefined\") {\r\n                    new TradingView.MediumWidget(__assign(__assign({ \"symbols\": [\r\n                            [\r\n                                \"Apple\",\r\n                                \"AAPL\"\r\n                            ],\r\n                            [\r\n                                \"Google\",\r\n                                \"GOOGL\"\r\n                            ],\r\n                            [\r\n                                \"Microsoft\",\r\n                                \"MSFT\"\r\n                            ]\r\n                        ], \"chartOnly\": false, \"width\": \"100%\", \"height\": 400, \"locale\": \"en\", \"colorTheme\": \"dark\", \"gridLineColor\": \"#2A2E39\", \"trendLineColor\": \"#1976D2\", \"fontColor\": \"#787B86\", \"underLineColor\": \"rgba(55, 166, 239, 0.15)\", \"isTransparent\": false, \"autosize\": false, \"container_id\": containerId }, widgetProps), widgetPropsAny));\r\n                }\r\n            };\r\n            ref.current.appendChild(script);\r\n            refValue = ref.current;\r\n        }\r\n        return function () {\r\n            if (refValue) {\r\n                while (refValue.firstChild) {\r\n                    refValue.removeChild(refValue.firstChild);\r\n                }\r\n            }\r\n        };\r\n    }, [ref, widgetProps, widgetPropsAny, containerId]);\r\n    return _jsx(\"div\", { id: containerId, ref: ref }, void 0);\r\n};\r\nexport default SymbolOverview;\r\n//# sourceMappingURL=SymbolOverview.js.map"]},"metadata":{},"sourceType":"module"}